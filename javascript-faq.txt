1. How to access attributes of html elements

- After you grab element by queries it, you can directly access them, 
like this element.name, element.class and so on, but you can only 
read values, if you want to change them, you have to use method 
"setAttribute", also you can enlist all the attributes currently 
set on the element by getter method attributes, which is giving 
"NamedNodeMap" odd object.

2. How to change element's styles on the fly

- Well it's really easy, all you need to do is to access "style" 
object on the element which present on almost every element, then you 
browse your needed style prop and assign any value or just read it, 
one thing however, you have to access props separated by dash in 
camelCase style, for example prop like "background-color" which is 
convenient in css, won't work in JS world, you have to access it by 
"backgroundColor" prop.

3. How to get query params from the URL in JS

- URLSearchParams is the constructor which receives search string in format of 
?search=value, from which it extracts parts of the query.
https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams


4. How to detect platfrom

- It's being done by navigator object, there are many ways, but of course none of them
are 100% precise 
https://www.delftstack.com/howto/javascript/javascript-detect-operating-system/

5. How to determine if Object is really an object and array is really an array

- Well it's tricky in JS since, arrays, functions and objects are all of type object 
if you try find out by typeof operator, but there's a way to do it, if you go to their 
__proto__ prop, you can see they have prop called 'constructor', you should call name getter 
method on it, and you'll find out exactly by which constructor it been created.
Of course if you don't want all these hustle, 'underscore.js' have all of these helpers 
predefined, so you don't need to do this manually.

"({}).__proto__.constructor.name" this will give you string "Object"
_.isObject({}) -> true it's an easier to use isn't,
